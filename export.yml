---
- name: AWX export
  hosts: localhost
  connection: local
  vars:
    - git_user: davidthong
    - git_pat: "{{ github_pat }}"
    - repo_url: "https://{{ git_user }}:{{ git_pat }}@github.com/{{ git_user }}/awx_import_poc.git"
    - repo_dir: /tmp/export
    - controller_host: 192.168.0.224
    - org_id: 1
    - controller_api_plugin: awx.awx.controller_api
    - query_controller_api_max_objects: 10000
    - controller_validate_certs: false
    - controller_hostname: "{{ controller_host | default(groups['automationcontroller'][0]) }}:{{ controller_port | default(443) }}"
    - controller_username: "{{ controller_user | default('admin') }}"
    - controller_password: "{{ controller_pass }}"
    - export_branch: main
    - env: dev
  vars_files:
    - vault.yml

  # pre_tasks:
  #   - name: "Setup authentication (block)"
  #     block:
  #       - name: "Get the Authentication Token for the future requests"
  #         ansible.builtin.uri:
  #           url: "https://{{ controller_hostname }}/api/v2/tokens/"
  #           user: "{{ controller_username }}"
  #           password: "{{ controller_password }}"
  #           method: POST
  #           force_basic_auth: true
  #           validate_certs: "{{ controller_validate_certs }}"
  #           status_code: 201
  #         register: authtoken_res

  #       - name: "Set the oauth token to be used since now"
  #         ansible.builtin.set_fact:
  #           controller_oauthtoken: "{{ authtoken_res.json.token }}"
  #           controller_oauthtoken_url: "{{ authtoken_res.json.url }}"
  #     when: controller_oauthtoken is not defined
  #     tags:
  #       - always

  tasks:

     - name: Clone the repository if it doesn't exist
       ansible.builtin.git:
                repo: "{{ repo_url }}"
                dest: "{{ repo_dir }}"
                clone: yes
                update: yes
       no_log: true

     - name: Generate Branch 
       ansible.builtin.set_fact:
            export_branch: "aap_export_{{ ansible_date_time.year }}_{{ ansible_date_time.month }}_{{ ansible_date_time.day }}_jobID_{{ awx_job_id }}"
    
     - name: Checkout new branch
       ansible.builtin.command:
          cmd: "git checkout -b {{ export_branch }}"
          chdir: "{{ repo_dir }}"   

     - name: Make a GET call to the Tower settings API
       uri:
          url: "https://{{ controller_host }}/api/v2/settings/all/"
          method: GET
          headers:
            Authorization: "Bearer {{ aap_bearer_token }}"
            Content-Type: "application/json"
          validate_certs: no  # Set to yes if using HTTPS with valid certs
       register: aap_controller_settings_response
      
     - name: Convert registed output from api call to settings dictionary
       ansible.builtin.set_fact:
        aap_settings: "{{ aap_controller_settings_response.json }}"
      
     - name: Ensure the directory exists
       ansible.builtin.file:
              path: "{{ repo_dir}}/output/"   # Replace with the directory path you want to create
              state: directory
    
     - name: Copy settings template to working directory
       ansible.builtin.template:
        src: settings.yml.j2
        dest: "{{ repo_dir}}/output/settings.yml"

     - name: Add the file to the Git repository
       ansible.builtin.command:
          cmd: "git status"
          chdir: "{{ repo_dir }}"

     - name: Add the file to the Git repository
       ansible.builtin.command:
          cmd: "git add . "
          chdir: "{{ repo_dir }}"

     - name: Commit the changes
       ansible.builtin.command:
          cmd: git commit --no-verify -m 'update settings yaml'
          chdir: "{{ repo_dir }}"
       ignore_errors: yes
      
     - name: Push the changes to the remote repository
       ansible.builtin.command:
          cmd: "git push origin {{ export_branch }}"  
          chdir: "{{ repo_dir }}"

  #   - name: "Gets current Organizations configured"
  #     ansible.builtin.set_fact:
  #       organizations: "{{ query(controller_api_plugin, 'organizations',
  #                                                 host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
  #                                                 return_all=true, max_objects=query_controller_api_max_objects)
  #                                        }}"

  #   - name: Retrieve dictionary with id=3
  #     ansible.builtin.set_fact:
  #       org_selected: "{{ organizations | selectattr('id', 'equalto', 1) | list | first }}"

  #   - debug: var=org_selected.name

  #   - name: "Get the API list of all Projects in Organization {{ orgs }}"
  #     ansible.builtin.set_fact:
  #        projects: "{{ query(controller_api_plugin, 'projects',
  #                                        query_params={'organization': org_id},
  #                                        host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
  #                                        return_all=true, max_objects=query_controller_api_max_objects)
  #                               }}"

  #   - debug: var=projects
  
  #   - name: "Get the API list of all Credential Types"
  #     ansible.builtin.set_fact:
  #       credential_types: "{{ query(controller_api_plugin, 'credential_types',
  #                                               query_params={'managed': false},
  #                                               host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
  #                                               return_all=true, max_objects=query_controller_api_max_objects)
  #                                       }}"
  #   - debug:
  #        msg: 
  #          - Credential Types
  #          - "{{ credential_types }}"
 
  #   - name: "Get the API list of all Credentials in Organization {{ orgs }}"
  #     ansible.builtin.set_fact:
  #       credentials: "{{ query(controller_api_plugin, 'credentials',
  #                                               query_params={'organization': org_id},
  #                                               host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
  #                                               return_all=true, max_objects=query_controller_api_max_objects)
  #                                     }}"
  
  #   - debug: var=credentials

  #   - name: "Get the API list of all Execution Environments in Organization {{ orgs }}"
  #     ansible.builtin.set_fact:
  #       execution_environments: "{{ query(controller_api_plugin, 'execution_environments',
  #                                                          query_params={'organization': org_id},
  #                                                          host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
  #                                                          return_all=true, max_objects=query_controller_api_max_objects)
  #                                                 }}"

  #   - name: Clone the repository if it doesn't exist
  #     ansible.builtin.git:
  #       repo: "{{ repo_url }}"
  #       dest: "{{ repo_dir }}"
  #       clone: yes
  #       update: yes
  #     no_log: true

  #   # - name: Generate Branch 
  #   #   ansible.builtin.set_fact:
  #   #       export_branch: "aap_export_{{ ansible_date_time.year }}_{{ ansible_date_time.month }}_{{ ansible_date_time.day }}_jobID_{{ awx_job_id }}"

  #   - debug: var=export_branch

  #   - name: config email
  #     ansible.builtin.command:
  #       cmd: "git config --global user.email 'dthong@gmail.com'"
  #       chdir: "{{ repo_dir }}"
    
  #   - name: config name
  #     ansible.builtin.command:
  #       cmd: "git config --global user.name 'david thong'"
  #       chdir: "{{ repo_dir }}"
    

  #   - name: Cleanup working directory
  #     ansible.builtin.file:
  #       path: "{{ repo_dir}}/output/"  # Replace with the directory you want to remove
  #       state: absent
    
  #   - name: Ensure the directory exists
  #     ansible.builtin.file:
  #       path: "{{ repo_dir}}/output/"   # Replace with the directory path you want to create
  #       state: directory
  



 



  # #  - name: Convert registed output from export to job templates dictionary
  # #    ansible.builtin.set_fact:
  # #      job_templates: "{{ register_job_templates.assets.job_templates}}"

  # #  - name: Convert registed output from api call to settings dictionary
  # #    ansible.builtin.set_fact:
  # #      aap_settings: "{{ aap_controller_settings_response.json }}"

  # #  - name: Convert JSON to YAML
  # #    ansible.builtin.set_fact:
  # #       yaml_data: "{{ job_templates | to_yaml }}"

  # #  - debug: var=yaml_data

  # #  - debug: var=aap_settings

  #   - name: Copy projects to working directory
  #     ansible.builtin.template:
  #       src: credential_types.yml.j2
  #       dest: "{{ repo_dir}}/output/credential_types.yml"
    
  #   - name: Copy projects to working directory
  #     ansible.builtin.template:
  #       src: credentials.yml.j2
  #       dest: "{{ repo_dir}}/output/credentials.yml"

   

  # post_tasks:
  #   - name: "Delete the Authentication Token used"
  #     ansible.builtin.uri:
  #       url: "https://{{ controller_hostname }}{{ controller_oauthtoken_url }}"
  #       user: "{{ controller_username }}"
  #       password: "{{ controller_password }}"
  #       method: DELETE
  #       force_basic_auth: true
  #       validate_certs: "{{ controller_validate_certs }}"
  #       status_code: 204
  #     when: controller_oauthtoken_url is defined
