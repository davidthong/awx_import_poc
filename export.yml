---
- name: AWX export
  hosts: localhost
  connection: local
  vars:
    - git_user: davidthong
    - git_pat: "{{ github_pat }}"
    - repo_url: "https://{{ git_user }}:{{ git_pat }}@github.com/{{ git_user }}/awx_import_poc.git"
    - repo_dir: /tmp/export
    - controller_host: 192.168.0.224
  vars_files:
    - vault.yml

  tasks:

    - name: Fetch organization information by name
      awx.awx.organization:
        name: "Doggies"  # Replace with the actual organization name
      register: org_info

    - debug: var=org_info
    # - name: Return ID of Org based on name input
    #   ansible.builtin.uri:
    #     url: "https://{{ controller_host }}/api/v2/organizations/"
    #     method: GET
    #     user: "{{ controller_username }}"
    #     password: "{{ controller_password }}"
    #     force_basic_auth: yes
    #     return_content: yes
    #     validate_certs: no  # Set to yes if using HTTPS with valid certs  
    #   register: aap_orgs

    # - debug: var=aap_orgs.json.results 

    # - name: get list of all orgs

    #   ansible.builtin.set_fact:
    #       orgs: "{{ aap_orgs.json.results | map(attribute='name') | list }}"

    
    # - debug: var=orgs

 

  #  - name: Display version of awx.awx
  #    ansible.builtin.command:
  #     cmd: "ansible-galaxy collection list awx.awx"
     
  #  - name: Display version of awxkit
  #    ansible.builtin.command:
  #     cmd: "pip3 list"

  #  - name: Clone the repository if it doesn't exist
  #    ansible.builtin.git:
  #     repo: "{{ repo_url }}"
  #     dest: "{{ repo_dir }}"
  #     clone: yes
  #     update: yes
  #    no_log: true
    
  #  - name: config email
  #    ansible.builtin.command:
  #     cmd: "git config --global user.email 'dthong@gmail.com'"
  #     chdir: "{{ repo_dir }}"
  
  #  - name: config name
  #    ansible.builtin.command:
  #     cmd: "git config --global user.name 'david thong'"
  #     chdir: "{{ repo_dir }}"

  #  ## More info on filtering : https://docs.ansible.com/ansible/latest/collections/awx/awx/export_module.html
  #  - name: Export job templates
  #    awx.awx.export:
  #      job_templates: 'all'
  #    register: register_job_templates

  #  - name: Generate Branch 
  #    ansible.builtin.set_fact:
  #       export_branch: "aap_export_{{ ansible_date_time.year }}_{{ ansible_date_time.month }}_{{ ansible_date_time.day }}_jobID_{{ awx_job_id }}"

  #  - debug: var=export_branch

  #  - name: Make a GET call to the Tower settings API
  #    uri:
  #     url: "https://{{ controller_host }}/api/v2/settings/all/"
  #     method: GET
  #     headers:
  #       Authorization: "Bearer {{ aap_bearer_token }}"
  #       Content-Type: "application/json"
  #     validate_certs: no  # Set to yes if using HTTPS with valid certs
  #    register: aap_controller_settings_response

  #  - name: Convert registed output from export to job templates dictionary
  #    ansible.builtin.set_fact:
  #      job_templates: "{{ register_job_templates.assets.job_templates}}"

  #  - name: Convert registed output from api call to settings dictionary
  #    ansible.builtin.set_fact:
  #      aap_settings: "{{ aap_controller_settings_response.json }}"

  #  - name: Convert JSON to YAML
  #    ansible.builtin.set_fact:
  #       yaml_data: "{{ job_templates | to_yaml }}"

  #  - debug: var=yaml_data

  #  - debug: var=aap_settings

  #  - name: Copy job template to working directory
  #    ansible.builtin.template:
  #      src: job_templates.j2
  #      dest: "{{ repo_dir}}/output/job_templates.yml"
  
  #  - name: Copy settings template to working directory
  #    ansible.builtin.template:
  #      src: settings.yml.j2
  #      dest: "{{ repo_dir}}/output/settings.yml"

  #  - name: Add the file to the Git repository
  #    ansible.builtin.command:
  #     cmd: "git status"
  #     chdir: "{{ repo_dir }}"

  #  - name: Add the file to the Git repository
  #    ansible.builtin.command:
  #     cmd: "git add . "
  #     chdir: "{{ repo_dir }}"

  #  - name: Commit the changes
  #    ansible.builtin.command:
  #     cmd: git commit -m 'update templates yaml'
  #     chdir: "{{ repo_dir }}"
  #    ignore_errors: yes
    
  #  - name: Push the changes to the remote repository
  #    ansible.builtin.command:
  #       cmd: "git push origin main"  
  #       chdir: "{{ repo_dir }}"