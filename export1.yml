---
- name: AWX export
  hosts: localhost
  connection: local
  vars:
    - git_user: davidthong
    - git_pat: "{{ github_pat }}"
    - repo_url: "https://{{ git_user }}:{{ git_pat }}@github.com/{{ git_user }}/awx_import_poc.git"
    - repo_dir: /tmp/export
   
  vars_files:
    - vault.yml


  tasks:

       - name: Exports Orgs 
         awx.awx.export:
            organizations: 'all'
         register: aap_organizations

       - name: Export Credential Types 
         awx.awx.export:
            credential_types : 'all'
         register: aap_credential_types 

       - name: Export Credentials
         awx.awx.export:
            credentials : 'all'
         register: aap_credentials

       - name: Export Projects
         awx.awx.export:
            projects : 'all'
         register: aap_projects
       
       - name: Export Inventory
         awx.awx.export:
            inventory : 'all'
         register: aap_inventory
        
       - name: Export Inventory Sources
         awx.awx.export:
            inventory_sources : 'all'
         register: aap_inventory_sources

       - name: Export Job Templates
         awx.awx.export:
            job_templates : 'all'
         register: aap_job_templates

       - name: Export Job Templates
         awx.awx.export:
            workflow_job_templates : 'all'
         register: workflow_job_templates
      
       - name: Initialize aap_export
         ansible.builtin.set_fact:
           aap_export: {}


       - name: Combine all AAP objects into one dictionary 
         ansible.builtin.set_fact:
            aap_export: "{{ aap_export | combine(item) }}"
         loop:
              - "{{ aap_organizations.assets }}"
              - "{{ aap_credential_types.assets }}"
              - "{{ aap_credentials.assets }}"
              - "{{ aap_inventory.assets }}"
              - "{{ aap_credential_types.assets }}"
              - "{{ aap_credentials.assets }}"

       - debug: var=aap_export


  #   - name: "Gets current Organizations configured"
  #     ansible.builtin.set_fact:
  #       organizations: "{{ query(controller_api_plugin, 'organizations',
  #                                                 host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
  #                                                 return_all=true, max_objects=query_controller_api_max_objects)
  #                                        }}"

  #   - name: Retrieve dictionary with id=3
  #     ansible.builtin.set_fact:
  #       org_selected: "{{ organizations | selectattr('id', 'equalto', 1) | list | first }}"

  #   - debug: var=org_selected.name

  #   - name: "Get the API list of all Projects in Organization {{ orgs }}"
  #     ansible.builtin.set_fact:
  #        projects: "{{ query(controller_api_plugin, 'projects',
  #                                        query_params={'organization': org_id},
  #                                        host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
  #                                        return_all=true, max_objects=query_controller_api_max_objects)
  #                               }}"

  #   - debug: var=projects
  
  #   - name: "Get the API list of all Credential Types"
  #     ansible.builtin.set_fact:
  #       credential_types: "{{ query(controller_api_plugin, 'credential_types',
  #                                               query_params={'managed': false},
  #                                               host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
  #                                               return_all=true, max_objects=query_controller_api_max_objects)
  #                                       }}"
  #   - debug:
  #        msg: 
  #          - Credential Types
  #          - "{{ credential_types }}"
 
  #   - name: "Get the API list of all Credentials in Organization {{ orgs }}"
  #     ansible.builtin.set_fact:
  #       credentials: "{{ query(controller_api_plugin, 'credentials',
  #                                               query_params={'organization': org_id},
  #                                               host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
  #                                               return_all=true, max_objects=query_controller_api_max_objects)
  #                                     }}"
  
  #   - debug: var=credentials

  #   - name: "Get the API list of all Execution Environments in Organization {{ orgs }}"
  #     ansible.builtin.set_fact:
  #       execution_environments: "{{ query(controller_api_plugin, 'execution_environments',
  #                                                          query_params={'organization': org_id},
  #                                                          host=controller_hostname, oauth_token=controller_oauthtoken, verify_ssl=controller_validate_certs,
  #                                                          return_all=true, max_objects=query_controller_api_max_objects)
  #                                                 }}"

  #   - name: Clone the repository if it doesn't exist
  #     ansible.builtin.git:
  #       repo: "{{ repo_url }}"
  #       dest: "{{ repo_dir }}"
  #       clone: yes
  #       update: yes
  #     no_log: true

  #   # - name: Generate Branch 
  #   #   ansible.builtin.set_fact:
  #   #       export_branch: "aap_export_{{ ansible_date_time.year }}_{{ ansible_date_time.month }}_{{ ansible_date_time.day }}_jobID_{{ awx_job_id }}"

  #   - debug: var=export_branch

  #   - name: config email
  #     ansible.builtin.command:
  #       cmd: "git config --global user.email 'dthong@gmail.com'"
  #       chdir: "{{ repo_dir }}"
    
  #   - name: config name
  #     ansible.builtin.command:
  #       cmd: "git config --global user.name 'david thong'"
  #       chdir: "{{ repo_dir }}"
    

  #   - name: Cleanup working directory
  #     ansible.builtin.file:
  #       path: "{{ repo_dir}}/output/"  # Replace with the directory you want to remove
  #       state: absent
    
  #   - name: Ensure the directory exists
  #     ansible.builtin.file:
  #       path: "{{ repo_dir}}/output/"   # Replace with the directory path you want to create
  #       state: directory
  



 

  # #  - name: Make a GET call to the Tower settings API
  # #    uri:
  # #     url: "https://{{ controller_host }}/api/v2/settings/all/"
  # #     method: GET
  # #     headers:
  # #       Authorization: "Bearer {{ aap_bearer_token }}"
  # #       Content-Type: "application/json"
  # #     validate_certs: no  # Set to yes if using HTTPS with valid certs
  # #    register: aap_controller_settings_response

  # #  - name: Convert registed output from export to job templates dictionary
  # #    ansible.builtin.set_fact:
  # #      job_templates: "{{ register_job_templates.assets.job_templates}}"

  # #  - name: Convert registed output from api call to settings dictionary
  # #    ansible.builtin.set_fact:
  # #      aap_settings: "{{ aap_controller_settings_response.json }}"

  # #  - name: Convert JSON to YAML
  # #    ansible.builtin.set_fact:
  # #       yaml_data: "{{ job_templates | to_yaml }}"

  # #  - debug: var=yaml_data

  # #  - debug: var=aap_settings

  #   - name: Copy projects to working directory
  #     ansible.builtin.template:
  #       src: credential_types.yml.j2
  #       dest: "{{ repo_dir}}/output/credential_types.yml"
    
  #   - name: Copy projects to working directory
  #     ansible.builtin.template:
  #       src: credentials.yml.j2
  #       dest: "{{ repo_dir}}/output/credentials.yml"

    # - name: Copy settings template to working directory
    #   ansible.builtin.template:
    #     src: settings.yml.j2
    #     dest: "{{ repo_dir}}/output/settings.yml"

    # - name: Add the file to the Git repository
    #   ansible.builtin.command:
    #     cmd: "git status"
    #     chdir: "{{ repo_dir }}"

    # - name: Add the file to the Git repository
    #   ansible.builtin.command:
    #     cmd: "git add . "
    #     chdir: "{{ repo_dir }}"

    # - name: Commit the changes
    #   ansible.builtin.command:
    #     cmd: git commit --no-verify -m 'update templates yaml'
    #     chdir: "{{ repo_dir }}"
    #   ignore_errors: yes
    
    # - name: Push the changes to the remote repository
    #   ansible.builtin.command:
    #     cmd: "git push origin {{ export_branch }}"  
    #     chdir: "{{ repo_dir }}"
